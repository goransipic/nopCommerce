@using Nop.Core.Configuration
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Services.Security
@using Nop.Core.Events

@inject CommonSettings commonSettings
@inject IEventPublisher eventPublisher
@inject IPermissionService permissionService
@inject SeoSettings seoSettings
@inject AppSettings appSettings
@inject IThemeContext themeContext

@{

    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/js/public.countryselect.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/js/public.ajaxcart.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/js/public.common.js");
    //when jQuery migrate script logging is active you will see the log in the browser console
    if (commonSettings.JqueryMigrateScriptLoggingActive)
    {
        NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-migrate/jquery-migrate.js");
    }
    else
    {
        NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-migrate/jquery-migrate.min.js");
    }
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-ui-dist/jquery-ui.min.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-validation/jquery.validate.min.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery/jquery.min.js");

    string themename = await themeContext.GetWorkingThemeNameAsync();
    
    NopHtml.AppendScriptParts(ResourceLocation.Footer,$"~/Themes/{themename}/Content/js/theme.js", excludeFromBundle:true);
    NopHtml.AppendScriptParts(ResourceLocation.Footer,$"~/Themes/{themename}/Content/vendor/smooth-scroll/dist/smooth-scroll.js", excludeFromBundle:true);
    NopHtml.AppendScriptParts(ResourceLocation.Footer,$"~/Themes/{themename}/Content/vendor/bootstrap/dist/js/bootstrap.bundle.js", excludeFromBundle:true);

    //custom tag(s);
    if (!string.IsNullOrEmpty(seoSettings.CustomHeadTags))
    {
        NopHtml.AppendHeadCustomParts(seoSettings.CustomHeadTags);
    }

    var displayMiniProfiler = appSettings.Get<CommonConfig>().MiniProfilerEnabled && await permissionService.AuthorizeAsync(StandardPermissionProvider.AccessProfiling);

    //event
    await eventPublisher.PublishAsync(new PageRenderingEvent(NopHtml));
}
<!DOCTYPE html>
<html lang="@CultureInfo.CurrentUICulture.TwoLetterISOLanguageName" dir="@Html.GetUIDirection(!await Html.ShouldUseRtlThemeAsync())" class="@NopHtml.GeneratePageCssClasses()">
<head>
    <title>@NopHtml.GenerateTitle()</title>
    <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
    <meta name="description" content="@NopHtml.GenerateMetaDescription()" />
    <meta name="keywords" content="@NopHtml.GenerateMetaKeywords()" />
    <meta name="generator" content="nopCommerce" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    @NopHtml.GenerateHeadCustom()
    @*This is used so that themes can inject content into the header*@
    @await Html.PartialAsync("Head")

    @NopHtml.GenerateCssFiles()

    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeadHtmlTag })
    @NopHtml.GenerateCanonicalUrls()
    @await Component.InvokeAsync("NewsRssHeaderLink")
    @await Component.InvokeAsync("BlogRssHeaderLink")
    @*Insert favicon and app icons head code*@
    @await Component.InvokeAsync("Favicon")
    @if (displayMiniProfiler)
    {
        <mini-profiler />
    }
    @NopHtml.GenerateScripts(ResourceLocation.Head)
    @NopHtml.GenerateInlineScripts(ResourceLocation.Head)
    <!--Powered by nopCommerce - https://www.nopCommerce.com-->
</head>
<body>
    <nop-antiforgery-token />
    <script asp-location="Footer" >
            setTimeout(function () {
                if (!WebSocket) {
                    console.log("No WebSocket support available for LiveReload to work.");
                    return;
                }
            
                var retry = 0;
                var isClosing = false;
                var connection = tryConnect(true);
            
                function tryConnect(retryOnFail) {
                    try {
                        var host = 'wss://localhost:5001/__livereload';
                        connection = new WebSocket(host);
                    }
                    catch (ex) {
                        console.log("Failed Live Reload connection",ex);
                        if (retryOnFail)
                            retryConnection();
                    }
            
                    if (!connection)
                        return null;
            
            
                    connection.onmessage = function (message) {
                        if (message.data == 'DelayRefresh') {
                            console.log('Live Reload Delayed Reload.');
                            setTimeout(
                                function () {
                                    location.reload();
                                }, 1000);
                        }
                        if (message.data == 'Refresh')
                            setTimeout(function () { location.reload(); }, 10);
                    }
                    connection.onerror = function (event) {
                        console.log('Live Reload Socket error.', event);
                        if (retryOnFail)
                            retryConnection();
                    }
                    connection.onclose = function (event) {
                        console.log('Live Reload Socket closed.');
                        if (retryOnFail && !isClosing)
                            retryConnection();
                    }
                    connection.onopen = function (event) {
                        console.log('Live Reload socket connected.');
                    }
                    return connection;
                }
                function retryConnection() {
                    var interval = setInterval(function () {
                        console.log('Live Reload retrying connection.');
                        connection.onopen = null;
                        connection = tryConnect(false);
                        if (connection) {
                            if (connection.readyState === 1) {
                                location.reload(true);
                                clearInterval(interval);
                            } else {
                                connection.onopen = function (event) {
                                    console.log('Live Reload socket connected.');
                                    location.reload(true);
                                    clearInterval(interval);
                                }
                            }
                        }
                    }, 500);
                }
            
                // Prevent reload events triggered by closing the connection from interrupting navigation.
                window.addEventListener("beforeunload", function () {
                    isClosing = true;
                    console.log("Live Reload paused for page unload.");
                    setTimeout(function () {
                        // Assume that the user clicked Stay on Page if this logic is executing after the timeout.
                        isClosing = false;
                        if (connection) {
                            connection.onopen = null;
                            connection = tryConnect(true);
                            console.log("Live Reload resumed after unload was cancelled.");
                        }
                    }, 2500);
                });
            }, 500);
        </script>
    @RenderBody()
    @NopHtml.GenerateScripts(ResourceLocation.Footer)
    @NopHtml.GenerateInlineScripts(ResourceLocation.Footer)
</body>
</html>