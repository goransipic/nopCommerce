@{
    Layout = "_Root";
}
@{
    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
}

<div class="container py-5">

    <div class="row g-0">

        @if (IsSectionDefined("left"))
        {
            @* @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.LeftSideColumnBefore}) *@
            @await RenderSectionAsync("left")
            @* @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.LeftSideColumnAfter}) *@
        }
        else
        {
            <aside class="col-lg-4 col-xl-3 border-top-lg border-end-lg shadow-sm px-3 px-xl-4 px-xxl-5 pt-lg-2">
                <div class="offcanvas offcanvas-start offcanvas-collapse" id="filters-sidebar">
                    <div class="offcanvas-header bg-transparent d-flex d-lg-none align-items-center">
                        <h2 class="h5 mb-0">Filters</h2>
                        <button class="btn-close" type="button" data-bs-dismiss="offcanvas"></button>
                    </div>
                    <div class="offcanvas-body py-lg-4">
                        @await RenderSectionAsync("CatalogFilters", false)
                    </div>
                </div>
                @* @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.LeftSideColumnBefore}) *@
                @* @await RenderSectionAsync("CatalogFilters", false) *@
                @* @await Component.InvokeAsync("CategoryNavigation", new {currentCategoryId = currentCategoryId, currentProductId = currentProductId}) *@
                @* @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation}) *@
                @* @await Component.InvokeAsync("ManufacturerNavigation", new {currentManufacturerId = currentManufacturerId}) *@
                @* @await Component.InvokeAsync("VendorNavigation") *@
                @* @await Component.InvokeAsync("RecentlyViewedProductsBlock", new {productThumbPictureSize = 64}) *@
                @* @await Component.InvokeAsync("PopularProductTags") *@
                @* @await Component.InvokeAsync("PollBlock", new {systemKeyword = "LeftColumnPoll"}) *@
                @* @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.LeftSideColumnAfter}) *@
            </aside>
        }
        @await RenderSectionAsync("Breadcrumb", false)

        @* @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.MainColumnBefore}) *@
        @RenderBody()
        @* @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.MainColumnAfter}) *@

    </div>
</div>